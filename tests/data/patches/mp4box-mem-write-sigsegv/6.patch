
            ; patch_type = sigsegv_memcpy
            push rcx    ; clobbered by syscall instruction
            push r11    ; clobbered by syscall instruction
            push rdx
            push rsi
            push rax
            push rdi
            push rbx
            push r12
            push r13
            ; save arguments for use later
            mov rbx, rdi
            mov r12, rsi
            mov r13, rdx
            ; check if all destination bytes are valid using madvise
            ; compute start address of page with first byte of destination pointer
            mov rdx, 4095
            not rdx
            and rdi, rdx
            ; compute end address of page with last byte of destination pointer and thus, number of bytes to check
            lea rsi, [rbx + r13 + 4096]
            and rsi, rdx
            sub rsi, rdi
            mov rdx, 0
            mov rax, 28
            syscall
            cmp eax, 0
            jl skip_memcpy
            ; check if all source bytes are valid using madvise
            ; compute start address of page with first byte of source pointer
            mov rdi, r12
            mov rdx, 4095
            not rdx
            and rdi, rdx
            ; compute end address of page with last byte of source pointer and thus, number of bytes to check
            lea rsi, [r12 + r13 + 4096]
            and rsi, rdx
            sub rsi, rdi
            mov rdx, 0
            mov rax, 28
            syscall
            cmp eax, 0
            jge done
            skip_memcpy:
                pop r13
                pop r12
                pop rbx
                pop rdi
                pop rax
                pop rsi
                pop rdx
                pop r11
                pop rcx
                jmp 3680882
            done:
                pop r13
                pop r12
                pop rbx
                pop rdi
                pop rax
                pop rsi
                pop rdx
                pop r11
                pop rcx
        